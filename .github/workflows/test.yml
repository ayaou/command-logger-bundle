name: Tests and Release

# Trigger the workflow on these events
on:
  push:
    branches:
      - '*'  # Run on push to any branch
  pull_request:
    branches:
      - '*'  # Run on PRs targeting any branch

# Set permissions for GITHUB_TOKEN
permissions:
  contents: write  # Needed for pushing tags and commits
  issues: write    # Optional, for @semantic-release/github to create failure issues

jobs:
  # Job 1: Run tests
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Clones the repo

      - name: Set up PHP
        uses: shivammathur/setup-php@v2  # Installs PHP 8.2
        with:
          php-version: '8.2'
          extensions: sqlite3, pdo_sqlite  # For Doctrine/SQLite in tests

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --dev  # Installs PHP deps

      - name: Run integration tests
        run: vendor/bin/phpunit tests/Integration  # Runs integration tests

      - name: Run unit tests
        run: vendor/bin/phpunit tests/Unit  # Runs unit tests

  # Job 2: Handle release (only on main)
  release:
    runs-on: ubuntu-latest
    needs: tests  # Runs only if tests pass
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # Only on push to main
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full Git history for commit analysis

      - name: Set up Node.js
        uses: actions/setup-node@v4  # Installs Node.js for semantic-release
        with:
          node-version: '18'

      - name: Install semantic-release
        run: npm install -g semantic-release @semantic-release/git @semantic-release/changelog @semantic-release/github  # Installs semantic-release and plugins

      - name: Run semantic-release
        id: semantic-release  # ID to capture outputs
        run: |
          npx semantic-release
          # Capture version and release URL
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "released=true" >> $GITHUB_OUTPUT
          RELEASE_URL=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest | jq -r .upload_url)
          echo "release-url=$RELEASE_URL" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Token for GitHub API and Git pushes

      - name: Create release archive
        if: steps.semantic-release.outputs.released == 'true'  # Only if a release happened
        run: |
          mkdir release-files
          cp -r src config tests docs release-files/
          cp CHANGELOG.md composer.json LICENSE README.md release-files/
          cd release-files
          zip -r ../release.zip .
        shell: bash

      - name: Upload release asset
        if: steps.semantic-release.outputs.released == 'true'
        uses: actions/upload-release-asset@v1  # Uploads the zip as a release asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.semantic-release.outputs.release-url }}  # From semantic-release
          asset_path: release.zip
          asset_name: command-logger-bundle-${{ steps.semantic-release.outputs.version }}.zip
          asset_content_type: application/zip